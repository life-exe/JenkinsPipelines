def ColorFromBuildResult(result){
    if("${result}" == 'SUCCESS') return '#18A558'
    if("${result}" == 'ABORTED') return '#6e6e6e'
    if("${result}" == 'UNSTABLE') return '#fcba03'
    return '#FF0000'
}

pipeline {
    agent {
        node {
            label ""
            customWorkspace "$BUILD_DIR"
        }
    }

    /* environment {
        BUILD_DIR = 'c:\\Project\\Project-pipeline'
        GIT_URL_PLUGIN = 'https://github.com/account/project'
        GIT_CREDENTIALS_GAME = 'credentials-id'
        GIT_BRANCH_GAME = 'master'
        GIT_CLONE_TIMEOUT_MIN = 60
        UAT_PATH = 'C:\\Epic Games\\UE Binary\\UE_5.3\\Engine\\Build\\BatchFiles\\RunUAT.bat'
        SLACK_CHANNEL = 'project-channel'
        PLUGIN_NAME = 'OpenAI'
        PACKAGE_PATH = 'c:\\JenkinsJobs\\Artifacts\\OpenAI'
    }*/

    stages {
        stage('Git clone') {
            steps {
                slackSend channel: "$SLACK_CHANNEL",
                    color: "$currentBuild.previousBuild" == 'null' ? '#18A558' :
                    ColorFromBuildResult("$currentBuild.previousBuild.result"),
                    message:"Build started: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"

                checkout([$class: 'GitSCM',
                    branches: [[name: "$GIT_BRANCH_GAME"]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption', timeout: "$GIT_CLONE_TIMEOUT_MIN"],
                        [$class: 'CheckoutOption', timeout: "$GIT_CLONE_TIMEOUT_MIN"],
                        [$class: 'SubmoduleOption', recursiveSubmodules: true]
                    ],
                    userRemoteConfigs: [[credentialsId: "$GIT_CREDENTIALS_GAME",
                    url: "$GIT_URL_PLUGIN"]]])
            }
        }
        stage('Build') {
            steps {
                bat '''
                    "%UAT_PATH%" BuildPlugin -Plugin="%BUILD_DIR%\\%PLUGIN_NAME%.uplugin" -Package="%PACKAGE_PATH%"
                '''
            }
        }
        stage('Update plugin descriptor & zip') {
            environment {
                UPDATER_PATH="$BUILD_DIR\\plugin_descriptor_updater.py"
            }
            steps {
                script {
                    def UPDATER_URL = 'https://raw.githubusercontent.com/life-exe/JenkinsPipelines/master/Common/plugin_descriptor_updater.py'
                    powershell "Invoke-WebRequest -OutFile ${UPDATER_PATH} -Uri ${UPDATER_URL}"
                }
                bat '''
                    "%UPDATER_PATH%" "%PACKAGE_PATH%\\%PLUGIN_NAME%.uplugin"
                '''
                zip defaultExcludes: false, dir: "$PACKAGE_PATH", zipFile: "${PACKAGE_PATH}.zip"
            }
        }
    }

    post {
        always {
            slackSend channel: "$SLACK_CHANNEL",
                color: ColorFromBuildResult("$currentBuild.currentResult"),
                message:"Build $currentBuild.currentResult: ${env.JOB_NAME} #${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
        }
    }
}